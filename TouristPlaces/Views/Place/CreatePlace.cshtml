@model ICollection<TouristPlaces.DataAccess.Entities.RegionEntity>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Travel App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .form-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            background-color: white;
        }

        .form-header {
            text-align: center;
            margin-bottom: 30px;
            color: #0d6efd;
        }

        .form-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }

        .btn-submit {
            background-color: #0d6efd;
            border: none;
            width: 100%;
            padding: 10px;
            font-weight: 500;
        }

            .btn-submit:hover {
                background-color: #0b5ed7;
            }

        .form-control:focus, .form-select:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        .footer {
            text-align: center;
            margin-top: 20px;
            color: #6c757d;
        }

        body {
            background-color: #f8f9fa;
        }

        .alert-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            min-width: 300px;
            animation: slideIn 0.5s forwards;
        }

        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <div class="form-container">
            <div class="form-header">
                <i class="bi bi-plus-square-fill form-icon"></i>
                <h2>Добавить новое место</h2>
            </div>

            <form method="post" action="@Url.Action("CreatePlace", "Place")" enctype="multipart/form-data" id="createPlaceForm">
                <div class="mb-3">
                    <label for="name" class="form-label">Название места</label>
                    <input type="text" class="form-control" id="title" name="Title" required>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Описание</label>
                    <textarea class="form-control" id="description" name="Description" rows="3" required></textarea>
                </div>

                <div class="mb-3">
                    <label for="region" class="form-label">Регион</label>
                    <select class="form-select" id="regionId" name="Region" required>
                        <option value="">Выберите регион</option>
                        @foreach(var region in Model)
                        {
                            <option value="@region.Id">@region.Title</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="image" class="form-label">Фотография</label>
                    <input type="file" class="form-control" id="image" name="ImageFile" accept="image/*" required>
                </div>

                <button type="submit" class="btn btn-primary btn-submit">
                    <i class="bi bi-save"></i> Сохранить
                </button>
            </form>

            <div class="mt-3 text-center">
                <a href="@Url.Action("Index", "Home")" class="text-decoration-none">Вернуться на главную</a>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function convertToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        function showNotification(message, isSuccess = true) {
            const alertType = isSuccess ? 'alert-success' : 'alert-danger';
            const icon = isSuccess ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill';

            const alertHtml = `
                        <div class="alert ${alertType} alert-dismissible fade show alert-notification" role="alert">
                            <i class="bi ${icon} me-2"></i>
                            <strong>${isSuccess ? 'Успех!' : 'Ошибка!'}</strong> ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;

            const alertContainer = document.createElement('div');
            alertContainer.innerHTML = alertHtml;
            document.body.appendChild(alertContainer);

            setTimeout(() => {
                const bsAlert = new bootstrap.Alert(alertContainer.querySelector('.alert'));
                bsAlert.close();
            }, 5000);
        }

        document.getElementById('createPlaceForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const title = document.getElementById('title').value;
            const description = document.getElementById('description').value;
            const regionId = document.getElementById('regionId').value;
            const imageInput = document.getElementById('image');
            const imageFile = imageInput.files[0];

            if (!title || !description || !regionId || !imageFile) {
                showNotification("Все поля должны быть заполнены!", false);
                return;
            }

            try {
                const imageBase64 = await convertToBase64(imageFile);

                const placeData = {
                    Title: title,
                    Description: description,
                    Image: imageBase64.split(',')[1],
                    RegionId: regionId
                };

                const response = await fetch('@Url.Action("CreatePlace", "Place")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(placeData)
                });

                if (response.ok) {
                    showNotification("Туристическое место успешно создано!");
                    setTimeout(() => {
                        window.location.href = '@Url.Action("Index", "Home")';
                    }, 1000);
                } else {
                    const errorData = await response.json();
                    showNotification(errorData.message || "Произошла ошибка при создании места. Попробуйте снова.", false);
                }
            } catch (error) {
                console.error(error);
                showNotification("Произошла ошибка при отправке данных. Попробуйте снова.", false);
            }
        });
    </script>
</body>
</html>